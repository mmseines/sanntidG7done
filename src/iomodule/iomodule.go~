package iomodule

import(
   "driver"
   "time"
)

func IoManager(order_queue chan driver.Data, command_list chan driver.Data, completed_command chan driver.Data, panel_lights chan driver.Data){

   completed_commands := driver.DataInit()
   order_queue_copy := driver.DataInit()
   panel_lights_copy := driver.DataInit()
   command_list_copy := driver.DataInit()
   
   //Gorutine for reading relevant channels 
   go func(){
      for{
         select{
         case data := <- panel_lights:
            panel_lights_copy = data
         case data := <- completed_command:
            completed_commands = data         
         }
         time.Sleep(1*time.Millisecond)
      }
   }()
   
   for {
   
      //Stores button signals in arrays. 
      i := 0
      for i<driver.N_FLOORS{
         if driver.GetButtonSignal("command", i) == 1{
            command_list_copy.Array[i] = 1
         } 
         if driver.GetButtonSignal("down", i) == 1{
            order_queue_copy.Array[2*i] = 1
         }
         if driver.GetButtonSignal("up", i) == 1{
            order_queue_copy.Array[2*i + 1] = 1
         }
         i += 1
         
      }
      
      
      // Sets lights on according to input. 
      i= 0 
      for (i < driver.N_FLOORS){
         driver.SetButtonLamp("command", i, command_list_copy.Array[i])
         if (i == driver.GetFloor()){
            driver.SetFloorIndicator(i)
         }
         if (i > 0) && (panel_lights_copy.Array[i*2] != 0) {   
            driver.SetButtonLamp("down", i , 1)
         }else if (i >0){
         	driver.SetButtonLamp("down", i , 0)
         }
         if ((i < driver.N_FLOORS - 1) &&  (panel_lights_copy.Array[i*2+1] != 0)){
            driver.SetButtonLamp("up", i, 1)
         }else if (i<driver.N_FLOORS - 1){
         	driver.SetButtonLamp("up", i, 0)
         }
         i += 1
      }
      
      //Removes orders and sets bits low in the remove orders arrays because they no longer need to be removed. 
      
      i = 0
      for i<driver.N_FLOORS{
         if completed_commands.Array[i] == 1{
            command_list_copy.Array[i] = 0
            completed_commands.Array[i] = 0
         } 
         i += 1
      }
      
      
      
     
     command_list <- command_list_copy
     order_queue <- order_queue_copy
     order_queue_copy = driver.DataInit()
     
       
   time.Sleep(1*time.Millisecond)
   }

}

